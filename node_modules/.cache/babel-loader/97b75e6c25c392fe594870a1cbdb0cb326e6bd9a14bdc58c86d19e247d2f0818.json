{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\my-react-app\\\\src\\\\components\\\\MySlider.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\"; // 從 React 模組中引入 useState 鉤子\n\n// 定義 MySlider 組件，接收 onChange 函數作為參數\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MySlider({\n  onChange\n}) {\n  _s();\n  // 使用 useState 定義 value 狀態，初始值為 128\n  const [value, setValue] = useState(128);\n\n  // 定義 handleChange 函數，用於處理滑動條變化事件\n  const handleChange = e => {\n    setValue(e.target.value); // 更新 value 狀態為滑動條的值\n    // 如果存在 onChange 函數，則調用該函數並傳入滑動條的值\n    if (onChange) {\n      onChange(e.target.value);\n    }\n  };\n\n  // 返回滑動條組件的 JSX 結構\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      width: \"200\" // 這裡 width 屬性沒有效果，可移除\n      ,\n      min: \"0\",\n      max: \"255\",\n      value: value,\n      onChange: handleChange // 滑動條變化時調用 handleChange 函數\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n// 將 MySlider 組件導出，以便其他模組引入和使用\n_s(MySlider, \"eJE+6sted5OoGqIqtCc/KJqXdWs=\");\n_c = MySlider;\nexport default MySlider;\nvar _c;\n$RefreshReg$(_c, \"MySlider\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","MySlider","onChange","_s","value","setValue","handleChange","e","target","children","type","width","min","max","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/my-react-app/src/components/MySlider.js"],"sourcesContent":["import { useState } from \"react\"; // 從 React 模組中引入 useState 鉤子\r\n\r\n// 定義 MySlider 組件，接收 onChange 函數作為參數\r\nfunction MySlider({ onChange }) {\r\n  // 使用 useState 定義 value 狀態，初始值為 128\r\n  const [value, setValue] = useState(128);\r\n\r\n  // 定義 handleChange 函數，用於處理滑動條變化事件\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value); // 更新 value 狀態為滑動條的值\r\n    // 如果存在 onChange 函數，則調用該函數並傳入滑動條的值\r\n    if (onChange) {\r\n      onChange(e.target.value);\r\n    }\r\n  };\r\n\r\n  // 返回滑動條組件的 JSX 結構\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"range\"\r\n        width=\"200\" // 這裡 width 屬性沒有效果，可移除\r\n        min=\"0\"\r\n        max=\"255\"\r\n        value={value}\r\n        onChange={handleChange} // 滑動條變化時調用 handleChange 函數\r\n      />\r\n      <span>{value}</span> {/* 顯示當前滑動條的值 */}\r\n    </div>\r\n  );\r\n}\r\n\r\n// 將 MySlider 組件導出，以便其他模組引入和使用\r\nexport default MySlider;\r\n\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO,CAAC,CAAC;;AAElC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,QAAQA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC9B;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,GAAG,CAAC;;EAEvC;EACA,MAAMQ,YAAY,GAAIC,CAAC,IAAK;IAC1BF,QAAQ,CAACE,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAC,CAAC,CAAC;IAC1B;IACA,IAAIF,QAAQ,EAAE;MACZA,QAAQ,CAACK,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAC;IAC1B;EACF,CAAC;;EAED;EACA,oBACEJ,OAAA;IAAAS,QAAA,gBACET,OAAA;MACEU,IAAI,EAAC,OAAO;MACZC,KAAK,EAAC,KAAK,CAAC;MAAA;MACZC,GAAG,EAAC,GAAG;MACPC,GAAG,EAAC,KAAK;MACTT,KAAK,EAAEA,KAAM;MACbF,QAAQ,EAAEI,YAAa,CAAC;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,eACFjB,OAAA;MAAAS,QAAA,EAAOL;IAAK;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEV;;AAEA;AAAAd,EAAA,CA7BSF,QAAQ;AAAAiB,EAAA,GAARjB,QAAQ;AA8BjB,eAAeA,QAAQ;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}